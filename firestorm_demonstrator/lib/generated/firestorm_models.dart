/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* THE FOLLOWING FILE IS GENERATED BY FIRESTORM.               */
/* DO NOT MODIFY BY HAND.                                      */
/*                                                             */
/* Firestorm for Flutter: http://github.com/raylabz/firestorm  */
/* Developed by RayLabz.                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


import 'package:firestorm/fs/fs.dart';
import 'package:firestorm/rdb/rdb.dart';
import 'package:firestorm_demonstrator/address.dart';
import 'package:firestorm_demonstrator/contact_status.dart';
import 'package:firestorm_demonstrator/contact.dart';
import 'package:firestorm_demonstrator/status.dart';

// - - - - - - - FirestormObject Address - - - - - - -

extension AddressModel on Address {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'street': this.street,
			 'city': this.city,
		 };
	 }

	static Address fromMap(Map<String, dynamic> map) {
		 return Address(
			 map['id'] as String,
			 map['street'] as String,
			 map['city'] as String,
		 );
	 }

}

// - - - - - - - FirestormObject ContactStatus - - - - - - -

extension ContactStatusModel on ContactStatus {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'contactID': this.contactID,
			 'status': this.status.toString(),
		 };
	 }

	static ContactStatus fromMap(Map<String, dynamic> map) {
		 return ContactStatus(
			 map['id'] as String,
			 map['contactID'] as String,
			 Status.values.firstWhere((e) => e.toString() == map['status'] as String),
		 );
	 }

}

// - - - - - - - FirestormObject Contact - - - - - - -

extension ContactModel on Contact {

	static final bool fsSupport = true;
	static final bool rdbSupport = false;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'firstname': this.firstname,
			 'lastname': this.lastname,
			 'email': this.email,
			 'phone': this.phone,
			 'address': this.address.toMap(),
			 'createdAt': this.createdAt,
		 };
	 }

	static Contact fromMap(Map<String, dynamic> map) {
		 return Contact(
			 map['id'] as String,
			 map['firstname'] as String,
			 map['lastname'] as String,
			 map['email'] as String,
			 map['phone'] as String,
			 AddressModel.fromMap(Map<String, dynamic>.from(map['address'] as Map)),
			 map['createdAt'] as DateTime,
		 );
	 }

}


// - - - - - - - Registry - - - - - - -
final Map<Type, Map<String, dynamic> Function(dynamic)> toMapRegistry = {
	Address: (object) => (object as Address).toMap(),
	ContactStatus: (object) => (object as ContactStatus).toMap(),
	Contact: (object) => (object as Contact).toMap(),
};

final Map<Type, dynamic Function(Map<String, dynamic>)> fromMapRegistry = {
	Address: (map) => AddressModel.fromMap(map),
	ContactStatus: (map) => ContactStatusModel.fromMap(map),
	Contact: (map) => ContactModel.fromMap(map),
};

Map<String, dynamic> convertToMap(dynamic object) {
	final serializer = toMapRegistry[object.runtimeType];
	if (serializer != null) {
		return serializer(object);
	}
	throw UnsupportedError('toMap() not implemented for type: ${object.runtimeType}');
}

T convertFromMap<T>(Map<String, dynamic> map) {
	final deserializer = fromMapRegistry[T];
	if (deserializer == null) {
		throw UnsupportedError('fromMap() not implemented for type: ${T.toString()}');
	}
	return deserializer(map) as T;
}

registerClasses() {
	FS.registerSerializer<Address>((object) => object.toMap());
	FS.registerDeserializer<Address>((map) => AddressModel.fromMap(map));
	FS.registerSerializer<Contact>((object) => object.toMap());
	FS.registerDeserializer<Contact>((map) => ContactModel.fromMap(map));
	FS.registerSerializer<ContactStatus>((object) => object.toMap());
	FS.registerDeserializer<ContactStatus>((map) => ContactStatusModel.fromMap(map));
	RDB.registerSerializer<Address>((object) => object.toMap());
	RDB.registerDeserializer<Address>((map) => AddressModel.fromMap(map));
	RDB.registerSerializer<ContactStatus>((object) => object.toMap());
	RDB.registerDeserializer<ContactStatus>((map) => ContactStatusModel.fromMap(map));
}


