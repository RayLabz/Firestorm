/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* THE FOLLOWING FILE IS GENERATED BY FIRESTORM.               */
/* DO NOT MODIFY BY HAND.                                      */
/*                                                             */
/* Firestorm for Flutter: http://github.com/raylabz/firestorm  */
/* Developed by RayLabz.                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


import 'package:firestorm/fs/fs.dart';
import 'package:firestorm/rdb/rdb.dart';
import 'package:flutter_test_app/address.dart';
import 'package:flutter_test_app/computing_student.dart';
import 'package:flutter_test_app/evaluation/car.dart';
import 'package:flutter_test_app/evaluation/motorcycle.dart';
import 'package:flutter_test_app/person.dart';
import 'package:flutter_test_app/student.dart';
import 'package:flutter_test_app/crazy.dart';

// - - - - - - - FirestormObject Address - - - - - - -

extension AddressModel on Address {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'street': this.street,
			 'city': this.city,
		 };
	 }

	static Address fromMap(Map<String, dynamic> map) {
		 return Address(
			 map['id'] as String,
			 map['street'] as String,
			 map['city'] as String,
		 );
	 }

}

// - - - - - - - FirestormObject ComputingStudent - - - - - - -

extension ComputingStudentModel on ComputingStudent {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'firstname': this.firstname,
			 'lastname': this.lastname,
			 'age': this.age,
			 'height': this.height,
			 'isEmployed': this.isEmployed,
			 'friends': this.friends,
			 'studentID': this.studentID,
			 'school': this.school,
			 'pathway': this.pathway,
			 'address': this.address.toMap(),
			 'grades': this.grades,
		 };
	 }

	static ComputingStudent fromMap(Map<String, dynamic> map) {
		 return ComputingStudent(
			 map['id'] as String,
			 map['firstname'] as String,
			 map['lastname'] as String,
			 map['age'] as int,
			 map['height'] as double,
			 map['isEmployed'] as bool,
			 map['friends'] != null ? map['friends'].cast<String>() : [],
			 map['studentID'] as String,
			 map['school'] as String,
			 map['pathway'] as String,
			 null,
			 AddressModel.fromMap(Map<String, dynamic>.from(map['address'] as Map)),
			 map['grades'] != null ? map['grades'].cast<String, int>() : {},
		 );
	 }

}

// - - - - - - - FirestormObject Car - - - - - - -

extension CarModel on Car {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'brand': this.brand,
			 'model': this.model,
			 'doors': this.doors,
		 };
	 }

	static Car fromMap(Map<String, dynamic> map) {
		 return Car(
			 map['id'] as String,
			 map['brand'] as String,
			 map['model'] as String,
			 map['doors'] as int,
		 );
	 }

}

// - - - - - - - FirestormObject Motorcycle - - - - - - -

extension MotorcycleModel on Motorcycle {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'brand': this.brand,
			 'model': this.model,
			 'type': this.type,
		 };
	 }

	static Motorcycle fromMap(Map<String, dynamic> map) {
		 return Motorcycle(
			 map['id'] as String,
			 map['brand'] as String,
			 map['model'] as String,
			 map['type'] as String,
		 );
	 }

}

// - - - - - - - FirestormObject Person - - - - - - -

extension PersonModel on Person {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'firstname': this.firstname,
			 'lastname': this.lastname,
			 'age': this.age,
			 'height': this.height,
			 'isEmployed': this.isEmployed,
			 'friends': this.friends,
		 };
	 }

	static Person fromMap(Map<String, dynamic> map) {
		 return Person(
			 map['id'] as String,
			 map['firstname'] as String,
			 map['lastname'] as String,
			 map['age'] as int,
			 map['height'] as double,
			 map['isEmployed'] as bool,
			 map['friends'] != null ? map['friends'].cast<String>() : [],
		 );
	 }

}

// - - - - - - - FirestormObject Student - - - - - - -

extension StudentModel on Student {

	static final bool fsSupport = true;
	static final bool rdbSupport = true;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'firstname': this.firstname,
			 'lastname': this.lastname,
			 'age': this.age,
			 'height': this.height,
			 'isEmployed': this.isEmployed,
			 'friends': this.friends,
			 'studentID': this.studentID,
			 'school': this.school,
		 };
	 }

	static Student fromMap(Map<String, dynamic> map) {
		 return Student(
			 map['id'] as String,
			 map['firstname'] as String,
			 map['lastname'] as String,
			 map['age'] as int,
			 map['height'] as double,
			 map['isEmployed'] as bool,
			 map['friends'] != null ? map['friends'].cast<String>() : [],
			 map['studentID'] as String,
			 map['school'] as String,
		 );
	 }

}

// - - - - - - - FirestormObject Crazy - - - - - - -

extension CrazyModel on Crazy {

	static final bool fsSupport = true;
	static final bool rdbSupport = false;

	 Map<String, dynamic> toMap() {
		 return {
			 'id': this.id,
			 'ha': this.ha,
			 'dateTime': this.dateTime,
		 };
	 }

	static Crazy fromMap(Map<String, dynamic> map) {
		 return Crazy(
			 map['id'] as String,
			 map['ha'] as int,
			 map['dateTime'] as DateTime,
		 );
	 }

}


// - - - - - - - Registry - - - - - - -
final Map<Type, Map<String, dynamic> Function(dynamic)> toMapRegistry = {
	Address: (object) => (object as Address).toMap(),
	ComputingStudent: (object) => (object as ComputingStudent).toMap(),
	Car: (object) => (object as Car).toMap(),
	Motorcycle: (object) => (object as Motorcycle).toMap(),
	Person: (object) => (object as Person).toMap(),
	Student: (object) => (object as Student).toMap(),
	Crazy: (object) => (object as Crazy).toMap(),
};

final Map<Type, dynamic Function(Map<String, dynamic>)> fromMapRegistry = {
	Address: (map) => AddressModel.fromMap(map),
	ComputingStudent: (map) => ComputingStudentModel.fromMap(map),
	Car: (map) => CarModel.fromMap(map),
	Motorcycle: (map) => MotorcycleModel.fromMap(map),
	Person: (map) => PersonModel.fromMap(map),
	Student: (map) => StudentModel.fromMap(map),
	Crazy: (map) => CrazyModel.fromMap(map),
};

Map<String, dynamic> convertToMap(dynamic object) {
	final serializer = toMapRegistry[object.runtimeType];
	if (serializer != null) {
		return serializer(object);
	}
	throw UnsupportedError('toMap() not implemented for type: ${object.runtimeType}');
}

T convertFromMap<T>(Map<String, dynamic> map) {
	final deserializer = fromMapRegistry[T];
	if (deserializer == null) {
		throw UnsupportedError('fromMap() not implemented for type: ${T.toString()}');
	}
	return deserializer(map) as T;
}

registerClasses() {
	FS.registerSerializer<Address>((object) => object.toMap());
	FS.registerDeserializer<Address>((map) => AddressModel.fromMap(map));
	FS.registerSerializer<ComputingStudent>((object) => object.toMap());
	FS.registerDeserializer<ComputingStudent>((map) => ComputingStudentModel.fromMap(map));
	FS.registerSerializer<Crazy>((object) => object.toMap());
	FS.registerDeserializer<Crazy>((map) => CrazyModel.fromMap(map));
	FS.registerSerializer<Car>((object) => object.toMap());
	FS.registerDeserializer<Car>((map) => CarModel.fromMap(map));
	FS.registerSerializer<Motorcycle>((object) => object.toMap());
	FS.registerDeserializer<Motorcycle>((map) => MotorcycleModel.fromMap(map));
	FS.registerSerializer<Person>((object) => object.toMap());
	FS.registerDeserializer<Person>((map) => PersonModel.fromMap(map));
	FS.registerSerializer<Student>((object) => object.toMap());
	FS.registerDeserializer<Student>((map) => StudentModel.fromMap(map));
	RDB.registerSerializer<Address>((object) => object.toMap());
	RDB.registerDeserializer<Address>((map) => AddressModel.fromMap(map));
	RDB.registerSerializer<ComputingStudent>((object) => object.toMap());
	RDB.registerDeserializer<ComputingStudent>((map) => ComputingStudentModel.fromMap(map));
	RDB.registerSerializer<Car>((object) => object.toMap());
	RDB.registerDeserializer<Car>((map) => CarModel.fromMap(map));
	RDB.registerSerializer<Motorcycle>((object) => object.toMap());
	RDB.registerDeserializer<Motorcycle>((map) => MotorcycleModel.fromMap(map));
	RDB.registerSerializer<Person>((object) => object.toMap());
	RDB.registerDeserializer<Person>((map) => PersonModel.fromMap(map));
	RDB.registerSerializer<Student>((object) => object.toMap());
	RDB.registerDeserializer<Student>((map) => StudentModel.fromMap(map));
}


