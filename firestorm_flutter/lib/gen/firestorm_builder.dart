import 'dart:async';
import 'package:build/build.dart';
import 'package:source_gen/source_gen.dart';
import 'package:glob/glob.dart';

class FirestormBuilder implements Builder {

  @override
  final buildExtensions = const {
    r'$lib$': ['generated/firestorm_models.dart'],
  };

  @override
  Future<void> build(BuildStep buildStep) async {

    final fileBuffer = StringBuffer();
    final headerBuffer = StringBuffer();
    final importsBuffer = StringBuffer();
    final classBuffer = StringBuffer();

    headerBuffer.writeln('/* THE FOLLOWING FILE IS GENERATED BY FIRESTORM_BUILDER       */');
    headerBuffer.writeln('/* DO NOT MODIFY BY HAND                                      */');
    headerBuffer.writeln("/* Firestorm for Flutter: http://github.com/raylabz/firestorm */");
    headerBuffer.writeln();

    await for (final input in buildStep.findAssets(Glob('lib/**.dart'))) {
      if (!await buildStep.resolver.isLibrary(input)) continue;
      final libraryElement = await buildStep.resolver.libraryFor(input);
      final libraryReader = LibraryReader(libraryElement);

      for (final clazz in libraryReader.classes) {

        //Add into the import buffer:
        if (clazz.metadata.any((m) => m.element?.displayName == 'FirestormObject')) {
          importsBuffer.writeln("import '${input.uri}';");
        }

        //Check if the class has the FirestormObject annotation
        if (clazz.metadata.any((m) => m.element?.displayName == 'FirestormObject')) {

          classBuffer.writeln("// FirestormObject ${clazz.name}");

          //Generate extension class
          classBuffer.writeln("extension ${clazz.name}Model on ${clazz.name} {");

          //Generate toMap() method: -- TODO: move elsewhere
          classBuffer.writeln("\t Map<String, dynamic> toMap() {");
          classBuffer.writeln("\t\t return {");

          //Class fields:
          for (final field in clazz.fields) {
            classBuffer.writeln("\t\t\t '${field.name}': this.${field.name},");
          }

          //Find fields of parent classes and process:
          for (final parent in clazz.allSupertypes) {
            for (final parentField in parent.element.fields) {
              if (parentField.name != "hashCode" && parentField.name != "runtimeType") {
                classBuffer.writeln(
                    "\t\t\t '${parentField.name}': ${parentField.name},");
              }
            }
          }

          classBuffer.writeln("\t\t };");
          classBuffer.writeln("\t }");

          //Generate fromMap() method: --TODO: move elsewhere
          classBuffer.writeln("\t${clazz.name} fromMap(Map<String, dynamic> map) {");
          classBuffer.writeln("\t\t return ${clazz.name}(");

          //Class fields:
          for (final field in clazz.fields) {
            classBuffer.writeln("\t\t\t map['${field.name}'],"); //TODO - Type conversions, e.g. toDouble, toInt etc.
          }

          //Find fields of parent classes and process:
          for (final parent in clazz.allSupertypes) {
            for (final parentField in parent.element.fields) {
              if (parentField.name != "hashCode" && parentField.name != "runtimeType") {
                classBuffer.writeln("\t\t\t map['${parentField
                    .name}'],"); //TODO - Type conversions, e.g. toDouble, toInt etc.
              }
            }
          }

          classBuffer.writeln("\t\t );");
          classBuffer.writeln("\t }");

          //End extension class
          classBuffer.writeln("}");
          classBuffer.writeln();

          // fileBuffer.writeln('  static const String ${clazz.name} = \'${clazz.name}\';');
        }

      }

      importsBuffer.writeln();

    }

    //Add everything into the file buffer
    fileBuffer.writeln(headerBuffer.toString());
    fileBuffer.writeln(importsBuffer.toString());
    fileBuffer.writeln(classBuffer.toString());

    // fileBuffer.writeln('}');

    // Optional formatting:
    // final formatter = DartFormatter();
    // final formattedOutput = DartFormatter().format(fileBuffer.toString());

    final formattedOutput = fileBuffer.toString();

    final outputId = AssetId(buildStep.inputId.package, 'lib/generated/firestorm_models.dart');
    await buildStep.writeAsString(outputId, formattedOutput);
  }
}
